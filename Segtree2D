struct Segtree2D
{
    vector<vector<int>> st;
    void init(int n, int m)
    {
        st.resize(4 * n + 5, vector<int> (4 * m + 5, 0));
    }
    void build_y(int idx, int lx, int rx, int idy, int ly, int ry)
    {
        if(ly == ry)
        {
            if(lx == rx) st[idx][idy] = a[lx][ly];
            else st[idx][idy] = st[idx * 2][idy] + st[idx * 2 + 1][idy];
            return;
        }
        int mid = (ly + ry) / 2;
        build_y(idx, lx, rx, idy * 2, ly, mid);
        build_y(idx, lx, rx, idy * 2 + 1, mid + 1, ry);
        st[idx][idy] = st[idx][idy * 2] + st[idx][idy * 2 + 1];
    }
    void build(int id, int l, int r)
    {
        if(l != r)
        {
            int mid = (l + r) / 2;
            build(id * 2, l, mid);
            build(id * 2 + 1, mid + 1, r);
        }
        build_y(id, l, r, 1, 1, m);
    }
    int get_y(int idx, int idy, int l, int r, int u, int v)
    {
        if(l > v || r < u) return 0;
        if(l >= u && r <= v) return st[idx][idy];
        int mid = (l + r) / 2;
        return get_y(idx, idy * 2, l, mid, u, v) + get_y(idx, idy * 2 + 1, mid + 1, r, u, v);
    }
    int get_sum(int idx, int lx, int rx, int u, int v, int ly, int ry)
    {
        if(lx > v || rx < u) return 0;
        if(lx >= u && rx <= v) return get_y(idx, 1, 1, m, ly, ry);
        int mid = (lx + rx) / 2;
        return get_sum(idx * 2, lx, mid, u, v, ly, ry) + get_sum(idx * 2 + 1, mid + 1, rx, u, v, ly, ry);
    }
};
