struct SegTree
{
    vector<int> st;
    void init(int n)
    {
        st.resize(4 * n + 5, 0);
    }
    void build(int id, int l, int r)
    {
        if(l == r)
        {
           // st[id] = ;
            return;
        }
        int mid = (l + r) / 2;
        build(id * 2, l, mid);
        build(id * 2 + 1, mid + 1, r);
        st[id] = st[id * 2] + st[id * 2 + 1];
    }
    void update(int id, int l, int r, int pos, int val)
    {
        if(l > pos || r < pos) return;
        if(l == r && l == pos)
        {
            st[id] = val;
            return;
        }
        int mid = (l + r) / 2;
        update(id * 2, l, mid, pos, val);
        update(id * 2 + 1, mid + 1, r, pos, val);
        st[id] = st[id * 2] + st[id * 2 + 1];
    }
    int get(int id, int l, int r, int u, int v)
    {
        if(l > v || r < u) return 0;
        if(l >= u && r <= v) return st[id];
        int mid = (l + r) / 2;
        return get(id * 2, l, mid, u, v) + get(id * 2 + 1, mid + 1, r, u, v);
    }
};
