struct Trie
{
    struct TNode
    {
        int id;
        int cnt = 0;
        int child[2];
    };
    vector<TNode> tree;
    void New_node()
    {
        TNode tmp;
        tmp.id = tree.size();
        tmp.cnt = 0;
        for(int i=0; i<2; i++) tmp.child[i] = -1;
        tree.pb(tmp);
    }
    void add(int x)
    {
        int id = 0;
        for(int i=30; i>=0; i--)
        {
            int w = (x >> i & 1);
            if(tree[id].child[w] == -1)
            {
                New_node();
                tree[id].child[w] = tree.size() - 1;
            }
            id = tree[id].child[w];
            tree[id].cnt++;
        }
    }
    void del(int x)
    {
        int id = 0;
        for(int i=30; i>=0; i--)
        {
            int w = (x >> i & 1);
            if(tree[id].child[w] == -1)
            {
                New_node();
                tree[id].child[w] = tree.size() - 1;
            }
            id = tree[id].child[w];
            tree[id].cnt--;
        }
    }
    int get(int x)
    {
        int id = 0;
        int res = 0;
        for(int i=30; i>=0; i--)
        {
            int w = x >> i & 1;
            if(tree[id].child[w ^ 1] == -1 || !tree[tree[id].child[w ^ 1]].cnt) id = tree[id].child[w];
            else
            {
                res += (1 << i);
                id = tree[id].child[1 ^ w];
            }
        }
        return res;
    }
};
